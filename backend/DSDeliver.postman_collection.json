{
	"info": {
		"_postman_id": "29c36632-904c-4933-96b7-7ac0396a72d5",
		"name": "DSDeliver",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14107942"
	},
	"item": [
		{
			"name": "All products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array with at least one element\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"  responseData.forEach(function(product) {\r",
							"    pm.expect(product.price).to.be.a('number');\r",
							"    pm.expect(product.price).to.be.at.least(0, \"Price should be non-negative\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ImageUri is a valid URL\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (product) {\r",
							"        pm.expect(product.imageUri).to.match(/^http(s)?:\\/\\/\\S+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/products",
					"host": [
						"{{host}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "All orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array with at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the price of each product is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (order) {\r",
							"        pm.expect(order.products).to.be.an('array');\r",
							"        order.products.forEach(function (product) {\r",
							"            pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'id' is a positive integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"  responseData.forEach(function(order) {\r",
							"    pm.expect(order.id).to.be.a('number').and.to.be.greaterThan(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'moment' is a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function (order) {\r",
							"        pm.expect(order.moment).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'status' is one of the expected values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function (order) {\r",
							"        pm.expect(order.status).to.be.oneOf(['value1', 'value2', 'value3']);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'total' is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function (order) {\r",
							"        pm.expect(order.total).to.be.a('number').that.is.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that 'latitude' and 'longitude' are valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order).to.have.property('latitude').that.is.a('number').and.is.at.least(-90).and.is.at.most(90);\r",
							"        pm.expect(order).to.have.property('longitude').that.is.a('number').and.is.at.least(-180).and.is.at.most(180);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the 'id' of each product is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.products).to.be.an('array');\r",
							"\r",
							"        order.products.forEach(function(product) {\r",
							"            pm.expect(product.id).to.be.a('number').and.to.be.greaterThan(0, \"Product id should be a positive integer\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that 'moment' is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.moment).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}/orders",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set delivered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Latitude and longitude are valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.latitude).to.be.a('number').and.to.be.at.least(-90).and.to.be.at.most(90);\r",
							"    pm.expect(responseData.longitude).to.be.a('number').and.to.be.at.least(-180).and.to.be.at.most(180);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Moment is in a valid date and time format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.moment).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Moment is not in a valid date and time format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid ID greater than 0\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.id).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.total).to.be.a('number');\r",
							"  pm.expect(responseData.total).to.be.at.least(0, \"Total should be a non-negative number\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Products is an array with at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.products).to.be.an('array');\r",
							"    pm.expect(responseData.products.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the ID in the response matches the ID in the request path\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const orderId = pm.request.url.match(/\\/orders\\/(\\d+)/)[1];\r",
							"\r",
							"    pm.expect(responseData.id).to.equal(Number(orderId), \"ID in the response should match the ID in the request path\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'price' of each product is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.products.forEach(function(product) {\r",
							"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'description' of each product is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.products).to.be.an('array');\r",
							"\r",
							"    responseData.products.forEach(function (product) {\r",
							"        pm.expect(product.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the imageUri of each product is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.products.forEach(function (product) {\r",
							"        pm.expect(product.imageUri).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{host}}/orders/3/delivered",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders",
						"3",
						"delivered"
					]
				}
			},
			"response": []
		},
		{
			"name": "New order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.address).to.exist;\r",
							"    pm.expect(responseData.latitude).to.exist;\r",
							"    pm.expect(responseData.longitude).to.exist;\r",
							"    pm.expect(responseData.moment).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.total).to.exist;\r",
							"    pm.expect(responseData.products).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that the 'id' is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the 'latitude' and 'longitude' are valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.latitude).to.be.a('number').and.to.be.within(-90, 90);\r",
							"    pm.expect(responseData.longitude).to.be.a('number').and.to.be.within(-180, 180);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'moment' is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.moment).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Invalid date format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  \r",
							"  responseData.products.forEach(function (product) {\r",
							"    pm.expect(product.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative number\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the 'status' is one of the expected values\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.oneOf([\"pending\", \"processing\", \"completed\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.total).to.be.a('number').and.to.be.at.least(0, \"Total should be non-negative\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'products' array is present and contains at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.products).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that 'id' is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate latitude and longitude are valid coordinates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.latitude).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.latitude).to.be.within(-90, 90, \"Latitude must be between -90 and 90\");\r",
							"    \r",
							"    pm.expect(responseData.longitude).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.longitude).to.be.within(-180, 180, \"Longitude must be between -180 and 180\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'moment' is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.moment).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Invalid date format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.products).to.be.an('array');\r",
							"\r",
							"  responseData.products.forEach(function (product) {\r",
							"    pm.expect(product.price).to.be.a('number');\r",
							"    pm.expect(product.price).to.be.at.least(0, \"Price should be non-negative\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"address\": \"Avenida Paulista, 1500\",\n\t\"latitude\": -23.56168,\n\t\"longitude\": -46.656139,\n\t\"products\": [\n\t\t{\n\t\t\t\"id\": 2\n\t\t},\n\t\t{\n\t\t\t\"id\": 5\n\t\t}\n\t],\n    \"status\":\"PENDING\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/orders",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.price).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.imageUri).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.price).to.be.a('number');\r",
							"    pm.expect(responseData.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has optional fields - description and imageUri\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.imageUri).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description is a string or null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.be.oneOf([null, \"\", \"string\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ImageUri is a string or null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.imageUri).to.satisfy(function (value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    }, \"ImageUri should be a string or null\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'id' field is unique for each product\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    \r",
							"    pm.response.to.have.json(function (json) {\r",
							"        const productList = json.products;\r",
							"        const ids = new Set();\r",
							"        \r",
							"        productList.forEach(function (product) {\r",
							"            pm.expect(ids.has(product.id)).to.be.false;\r",
							"            ids.add(product.id);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'price' field has a maximum value of 10000\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.price).to.be.a('number');\r",
							"  pm.expect(responseData.price).to.be.at.most(10000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 500\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate timestamp field is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid date format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the status field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.a('number');\r",
							"    pm.expect(responseData.status).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the error field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the message field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Nome do Produto2\",\n\t\"price\": 19.99,\n    \"description\":\"Nova description\",\n    \"imageUri\": \"Link\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/products",
					"host": [
						"{{host}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.price).to.exist;\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.imageUri).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.price).to.be.a('number');\r",
							"    pm.expect(responseData.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has optional fields - description and imageUri\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.imageUri).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description is a string or null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.be.oneOf([null, \"\", \"string\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ImageUri is a string or null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.imageUri).to.satisfy(function (value) {\r",
							"        return typeof value === 'string' || value === null;\r",
							"    }, \"ImageUri should be a string or null\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'id' field is unique for each product\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    \r",
							"    pm.response.to.have.json(function (json) {\r",
							"        const productList = json.products;\r",
							"        const ids = new Set();\r",
							"        \r",
							"        productList.forEach(function (product) {\r",
							"            pm.expect(ids.has(product.id)).to.be.false;\r",
							"            ids.add(product.id);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'price' field has a maximum value of 10000\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.price).to.be.a('number');\r",
							"  pm.expect(responseData.price).to.be.at.most(10000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 500\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate timestamp field is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid date format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the status field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.status).to.be.a('number');\r",
							"    pm.expect(responseData.status).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the error field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the message field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate 'id' field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The 'price' field is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.price).to.be.a('number');\r",
							"    pm.expect(responseData.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has optional fields - 'description' and 'imageUri'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.description).to.exist;\r",
							"    pm.expect(responseData.imageUri).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate 'id' field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price field is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.price).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has optional fields - 'description' and 'imageUri'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.description).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.imageUri).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Novo Nome do Produto\",\n\t\"price\": 29.99,\n    \"description\": \"Nova descrição\",\n    \"imageUri\": \"Nova imagem\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/products/{{product_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080"
		},
		{
			"key": "product_id",
			"value": "1"
		}
	]
}